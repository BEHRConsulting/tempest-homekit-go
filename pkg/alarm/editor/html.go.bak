package editor

const indexHTML = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Alarm Configuration Editor</title>
    <link rel="stylesheet" href="/alarm-editor/static/styles.css">
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
        }
        
        .header h1 {
            font-size: 32px;
            margin-bottom: 10px;
        }
        
        .header p {
            opacity: 0.9;
            font-size: 14px;
        }
        
        .config-path-display {
            background: rgba(255,255,255,0.15);
            padding: 12px 16px;
            border-radius: 8px;
            margin-top: 15px;
            font-family: 'Courier New', monospace;
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 10px;
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        .config-path-display .label {
            font-weight: 600;
            opacity: 0.8;
        }
        
        .config-path-display .path {
            flex: 1;
            opacity: 1;
            word-break: break-all;
        }
        
        .toolbar {
            display: flex;
            gap: 15px;
            padding: 20px 30px;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            flex-wrap: wrap;
            align-items: center;
        }
        
        .toolbar input[type="text"] {
            padding: 10px 15px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            font-size: 14px;
            flex: 1;
            min-width: 200px;
        }
        
        .toolbar select {
            padding: 10px 15px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            font-size: 14px;
            min-width: 150px;
        }
        
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-primary {
            background: #667eea;
            color: white;
        }
        
        .btn-primary:hover {
            background: #5568d3;
            transform: translateY(-1px);
        }
        
        .btn-success {
            background: #28a745;
            color: white;
        }
        
        .btn-success:hover {
            background: #218838;
        }
        
        .btn-danger {
            background: #dc3545;
            color: white;
        }
        
        .btn-danger:hover {
            background: #c82333;
        }
        
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        
        .btn-secondary:hover {
            background: #5a6268;
        }
        
        .content {
            padding: 30px;
        }
        
        .alarm-grid {
            display: grid;
            gap: 20px;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        }
        
        .alarm-card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            background: white;
            transition: all 0.2s;
        }
        
        .alarm-card:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }
        
        .alarm-card.disabled {
            opacity: 0.6;
            background: #f8f9fa;
        }
        
        .alarm-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 15px;
        }
        
        .alarm-name {
            font-size: 18px;
            font-weight: 700;
            color: #212529;
            margin-bottom: 5px;
        }
        
        .alarm-description {
            font-size: 14px;
            color: #6c757d;
            margin-bottom: 10px;
        }
        
        .alarm-condition {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 13px;
            margin-bottom: 10px;
        }
        
        .alarm-tags {
            display: flex;
            gap: 5px;
            flex-wrap: wrap;
            margin-bottom: 10px;
        }
        
        .tag {
            background: #e7f3ff;
            color: #0066cc;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
        }
        
        .alarm-channels {
            font-size: 13px;
            color: #6c757d;
            margin-bottom: 10px;
        }
        
        .alarm-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        
        .alarm-actions button {
            flex: 1;
            padding: 8px;
            font-size: 13px;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            overflow-y: auto;
        }
        
        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 30px;
            max-width: 700px;
            width: 100%;
            max-height: 90vh;
            overflow-y: auto;
        }
        
        .modal-header {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
            color: #495057;
        }
        
        .form-group input[type="text"],
        .form-group input[type="number"],
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            font-size: 14px;
        }
        
        .form-group textarea {
            min-height: 80px;
            font-family: 'Courier New', monospace;
        }
        
        .form-group small {
            display: block;
            margin-top: 5px;
            color: #6c757d;
            font-size: 12px;
        }
        
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .checkbox-group input[type="checkbox"] {
            width: 20px;
            height: 20px;
        }
        
        .sensor-fields {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 15px;
        }
        
        .sensor-field-btn {
            padding: 6px 12px;
            border: 1px solid #667eea;
            background: white;
            color: #667eea;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .sensor-field-btn:hover {
            background: #667eea;
            color: white;
        }
        
        .delivery-methods {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 12px;
            margin-top: 10px;
        }
        
        .delivery-method {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            cursor: pointer;
        }
        
        .delivery-method:hover {
            background: #f8f9fa;
        }
        
        .delivery-method input[type="checkbox"] {
            width: 18px;
            height: 18px;
        }
        
        .tag-selector-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .selected-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            min-height: 40px;
            padding: 8px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            background: #f8f9fa;
            align-items: center;
        }
        
        .selected-tags:empty::before {
            content: "No tags selected";
            color: #6c757d;
            font-size: 13px;
        }
        
        .selected-tag {
            background: #667eea;
            color: white;
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 13px;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }
        
        .selected-tag .remove-tag {
            cursor: pointer;
            font-weight: bold;
            font-size: 16px;
            line-height: 1;
            opacity: 0.8;
            transition: opacity 0.2s;
        }
        
        .selected-tag .remove-tag:hover {
            opacity: 1;
        }
        
        .tag-dropdown-wrapper {
            position: relative;
        }
        
        .tag-search-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            font-size: 14px;
        }
        
        .tag-search-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .tag-dropdown {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            max-height: 200px;
            overflow-y: auto;
            background: white;
            border: 1px solid #ced4da;
            border-top: none;
            border-radius: 0 0 6px 6px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            z-index: 100;
            margin-top: -1px;
        }
        
        .tag-dropdown.active {
            display: block;
        }
        
        .tag-dropdown-item {
            padding: 10px;
            cursor: pointer;
            transition: background 0.2s;
            font-size: 14px;
        }
        
        .tag-dropdown-item:hover {
            background: #f8f9fa;
        }
        
        .tag-dropdown-item.selected {
            background: #e7f3ff;
            color: #0066cc;
        }
        
        .tag-dropdown-item.new-tag {
            background: #d4edda;
            color: #155724;
            font-weight: 600;
            border-top: 1px solid #c3e6cb;
        }
        
        .tag-dropdown-item.new-tag:hover {
            background: #c3e6cb;
        }
        
        .tag-dropdown-empty {
            padding: 10px;
            color: #6c757d;
            text-align: center;
            font-style: italic;
            font-size: 14px;
        }
        
        .modal-actions {
            display: flex;
            gap: 10px;
            margin-top: 25px;
        }
        
        .modal-actions button {
            flex: 1;
        }
        
        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 5px;
        }
        
        .status-enabled {
            background: #28a745;
        }
        
        .status-disabled {
            background: #dc3545;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 2000;
            display: none;
        }
        
        .notification.show {
            display: block;
            animation: slideIn 0.3s ease;
        }
        
        @keyframes slideIn {
            from {
                transform: translateX(400px);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        .notification.success {
            border-left: 4px solid #28a745;
        }
        
        .notification.error {
            border-left: 4px solid #dc3545;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
        }
        
        .empty-state h3 {
            font-size: 24px;
            margin-bottom: 10px;
        }
        
        .json-viewer {
            background: #282c34;
            color: #abb2bf;
            padding: 20px;
            border-radius: 8px;
            font-family: 'Courier New', Consolas, Monaco, monospace;
            font-size: 13px;
            overflow-x: auto;
            max-height: 600px;
            line-height: 1.6;
            white-space: pre;
        }
        
        .btn-info {
            background: #17a2b8;
            color: white;
        }
        
        .btn-info:hover {
            background: #138496;
            transform: translateY(-1px);
        }
        
        .btn-sm {
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>⚡ Tempest Alarm Editor</h1>
            <p>Create and manage weather alarms with real-time monitoring</p>
            <div class="config-path-display">
                <span class="label">📁 Watching:</span>
                <span class="path">{{.ConfigPath}}</span>
            </div>
        </div>
        
        <div class="toolbar">
            <input type="text" id="searchName" placeholder="🔍 Search by name..." />
            <select id="filterTag">
                <option value="">All Tags</option>
            </select>
            <button class="btn btn-primary" onclick="showCreateModal()">+ New Alarm</button>
            <button class="btn btn-info" onclick="showFullJSON()">📄 View Full JSON</button>
            <button class="btn btn-success" onclick="saveAll()">💾 Save All</button>
        </div>
        
        <div class="content">
            <div id="alarmList" class="alarm-grid"></div>
            <div id="emptyState" class="empty-state" style="display:none;">
                <h3>No alarms found</h3>
                <p>Create your first alarm to get started</p>
            </div>
        </div>
    </div>
    
    <div id="jsonModal" class="modal">
        <div class="modal-content wide">
            <div class="modal-header" id="jsonModalTitle">JSON View</div>
            <div class="json-viewer" id="jsonContent"></div>
            <div class="modal-actions">
                <button type="button" class="btn btn-secondary" onclick="closeJSONModal()">Close</button>
                <button type="button" class="btn btn-primary" onclick="copyJSON()">📋 Copy to Clipboard</button>
            </div>
        </div>
    </div>
    
    <div id="editModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">Edit Alarm</div>
            <form id="alarmForm">
                <div class="form-group">
                    <label>Name *</label>
                    <input type="text" id="alarmName" required />
                </div>
                
                <div class="form-group">
                    <label>Description</label>
                    <input type="text" id="alarmDescription" />
                </div>
                
                <div class="form-group">
                    <label>Condition *</label>
                    <div class="sensor-fields">
                        <button type="button" class="sensor-field-btn" onclick="insertField('temperature')">temperature</button>
                        <button type="button" class="sensor-field-btn" onclick="insertField('humidity')">humidity</button>
                        <button type="button" class="sensor-field-btn" onclick="insertField('pressure')">pressure</button>
                        <button type="button" class="sensor-field-btn" onclick="insertField('wind_speed')">wind_speed</button>
                        <button type="button" class="sensor-field-btn" onclick="insertField('wind_gust')">wind_gust</button>
                        <button type="button" class="sensor-field-btn" onclick="insertField('wind_direction')">wind_direction</button>
                        <button type="button" class="sensor-field-btn" onclick="insertField('lux')">lux</button>
                        <button type="button" class="sensor-field-btn" onclick="insertField('uv')">uv</button>
                        <button type="button" class="sensor-field-btn" onclick="insertField('rain_rate')">rain_rate</button>
                        <button type="button" class="sensor-field-btn" onclick="insertField('rain_daily')">rain_daily</button>
                        <button type="button" class="sensor-field-btn" onclick="insertField('lightning_count')">lightning_count</button>
                        <button type="button" class="sensor-field-btn" onclick="insertField('lightning_distance')">lightning_distance</button>
                    </div>
                    <textarea id="alarmCondition" required></textarea>
                    <small>Click sensor names above to insert into condition. Supports units: 80F or 26.7C (temp), 25mph or 11.2m/s (wind). Change detection: *field (any change), >field (increase), <field (decrease). Examples: temperature > 85F, *lightning_count (any strike), >rain_rate (rain increasing), <lightning_distance (lightning closer)</small>
                </div>
                
                <div class="form-group">
                    <label>Delivery Methods *</label>
                    <div class="delivery-methods">
                        <label class="delivery-method">
                            <input type="checkbox" id="deliveryConsole" checked />
                            <span>📟 Console</span>
                        </label>
                        <label class="delivery-method">
                            <input type="checkbox" id="deliverySyslog" />
                            <span>📋 Syslog</span>
                        </label>
                        <label class="delivery-method">
                            <input type="checkbox" id="deliveryEventlog" />
                            <span>📊 Event Log</span>
                        </label>
                        <label class="delivery-method">
                            <input type="checkbox" id="deliveryEmail" />
                            <span>✉️ Email</span>
                        </label>
                        <label class="delivery-method">
                            <input type="checkbox" id="deliverySMS" />
                            <span>📱 SMS</span>
                        </label>
                    </div>
                    <small>Select at least one delivery method</small>
                </div>
                
                <div class="form-group">
                    <label>Tags</label>
                    <div class="tag-selector-container">
                        <div class="selected-tags" id="selectedTags"></div>
                        <div class="tag-dropdown-wrapper">
                            <input type="text" 
                                   id="tagSearchInput" 
                                   class="tag-search-input" 
                                   placeholder="Search or add new tag..." 
                                   autocomplete="off" />
                            <div id="tagDropdown" class="tag-dropdown"></div>
                        </div>
                    </div>
                    <small>Click to select existing tags or type to create new ones</small>
                </div>
                
                <div class="form-group">
                    <label>Cooldown (seconds)</label>
                    <input type="number" id="alarmCooldown" value="1800" />
                </div>
                
                <div class="form-group checkbox-group">
                    <input type="checkbox" id="alarmEnabled" checked />
                    <label for="alarmEnabled">Enabled</label>
                </div>
                
                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Alarm</button>
                </div>
            </form>
        </div>
    </div>
    
    <div id="notification" class="notification"></div>
    
    <script src="/alarm-editor/static/script.js"></script>
        let alarms = [];
        let currentAlarm = null;
        let allTags = [];
        let selectedTags = [];
        
        async function init() {
            await loadAlarms();
            await loadTags();
            document.getElementById('searchName').addEventListener('input', filterAlarms);
            document.getElementById('filterTag').addEventListener('change', filterAlarms);
            document.getElementById('alarmForm').addEventListener('submit', handleSubmit);
            initTagSelector();
        }
        
        async function loadAlarms() {
            const response = await fetch('/api/config');
            const config = await response.json();
            alarms = config.alarms || [];
            renderAlarms();
        }
        
        async function loadTags() {
            const response = await fetch('/api/tags');
            allTags = await response.json();
            updateTagFilter();
        }
        
        function updateTagFilter() {
            const select = document.getElementById('filterTag');
            const currentValue = select.value;
            select.innerHTML = '<option value="">All Tags</option>';
            allTags.forEach(tag => {
                const option = document.createElement('option');
                option.value = tag;
                option.textContent = tag;
                if (tag === currentValue) option.selected = true;
                select.appendChild(option);
            });
        }
        
        function initTagSelector() {
            const searchInput = document.getElementById('tagSearchInput');
            const dropdown = document.getElementById('tagDropdown');
            
            searchInput.addEventListener('focus', () => {
                updateTagDropdown();
                dropdown.classList.add('active');
            });
            
            searchInput.addEventListener('input', (e) => {
                updateTagDropdown(e.target.value);
            });
            
            searchInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const value = searchInput.value.trim();
                    if (value) {
                        addTag(value);
                        searchInput.value = '';
                        updateTagDropdown();
                    }
                }
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.tag-dropdown-wrapper') && !e.target.closest('.tag-dropdown')) {
                    dropdown.classList.remove('active');
                }
            });
        }
        
        function updateTagDropdown(searchTerm = '') {
            const dropdown = document.getElementById('tagDropdown');
            const searchLower = searchTerm.toLowerCase();
            
            // Filter available tags (not already selected)
            const availableTags = allTags.filter(tag => 
                !selectedTags.includes(tag) && 
                tag.toLowerCase().includes(searchLower)
            );
            
            dropdown.innerHTML = '';
            
            if (availableTags.length === 0 && !searchTerm) {
                dropdown.innerHTML = '<div class="tag-dropdown-empty">No tags available</div>';
                return;
            }
            
            // Show matching existing tags
            availableTags.forEach(tag => {
                const item = document.createElement('div');
                item.className = 'tag-dropdown-item';
                item.textContent = tag;
                item.addEventListener('click', () => {
                    addTag(tag);
                    document.getElementById('tagSearchInput').value = '';
                    updateTagDropdown();
                });
                dropdown.appendChild(item);
            });
            
            // Show "add new tag" option if searching
            if (searchTerm && !allTags.includes(searchTerm) && !selectedTags.includes(searchTerm)) {
                const newTagItem = document.createElement('div');
                newTagItem.className = 'tag-dropdown-item new-tag';
                newTagItem.textContent = '+ Add new tag: "' + searchTerm + '"';
                newTagItem.addEventListener('click', () => {
                    addTag(searchTerm);
                    document.getElementById('tagSearchInput').value = '';
                    updateTagDropdown();
                });
                dropdown.appendChild(newTagItem);
            }
            
            if (dropdown.children.length === 0 && searchTerm) {
                dropdown.innerHTML = '<div class="tag-dropdown-empty">No matching tags</div>';
            }
        }
        
        function addTag(tag) {
            const trimmedTag = tag.trim();
            if (!trimmedTag || selectedTags.includes(trimmedTag)) return;
            
            selectedTags.push(trimmedTag);
            
            // Add to allTags if it's new
            if (!allTags.includes(trimmedTag)) {
                allTags.push(trimmedTag);
                allTags.sort();
                updateTagFilter();
            }
            
            renderSelectedTags();
        }
        
        function removeTag(tag) {
            selectedTags = selectedTags.filter(t => t !== tag);
            renderSelectedTags();
            updateTagDropdown();
        }
        
        function renderSelectedTags() {
            const container = document.getElementById('selectedTags');
            
            if (selectedTags.length === 0) {
                container.innerHTML = '';
                return;
            }
            
            container.innerHTML = selectedTags.map(tag => 
                '<div class="selected-tag">' +
                    '<span>' + tag + '</span>' +
                    '<span class="remove-tag" onclick="removeTag(\'' + tag.replace(/'/g, "\\'") + '\')">×</span>' +
                '</div>'
            ).join('');
        }
        
        function filterAlarms() {
            renderAlarms();
        }
        
        function renderAlarms() {
            const nameFilter = document.getElementById('searchName').value.toLowerCase();
            const tagFilter = document.getElementById('filterTag').value;
            
            const filtered = alarms.filter(alarm => {
                if (nameFilter && !alarm.name.toLowerCase().includes(nameFilter)) return false;
                if (tagFilter && !alarm.tags.includes(tagFilter)) return false;
                return true;
            });
            
            const container = document.getElementById('alarmList');
            const emptyState = document.getElementById('emptyState');
            
            if (filtered.length === 0) {
                container.innerHTML = '';
                emptyState.style.display = 'block';
                return;
            }
            
            emptyState.style.display = 'none';
            container.innerHTML = filtered.map(alarm => {
                const enabledClass = alarm.enabled ? '' : 'disabled';
                const statusClass = alarm.enabled ? 'status-enabled' : 'status-disabled';
                const description = alarm.description ? '<div class="alarm-description">' + alarm.description + '</div>' : '';
                const tags = alarm.tags && alarm.tags.length ? '<div class="alarm-tags">' + alarm.tags.map(tag => '<span class="tag">' + tag + '</span>').join('') + '</div>' : '';
                const channels = alarm.channels ? alarm.channels.map(ch => ch.type).join(', ') : 'No channels';
                
                return '<div class="alarm-card ' + enabledClass + '">' +
                    '<div class="alarm-header">' +
                        '<div>' +
                            '<div class="alarm-name">' +
                                '<span class="status-indicator ' + statusClass + '"></span>' +
                                alarm.name +
                            '</div>' +
                            description +
                        '</div>' +
                    '</div>' +
                    '<div class="alarm-condition">' + alarm.condition + '</div>' +
                    tags +
                    '<div class="alarm-channels">📢 ' + channels + '</div>' +
                    '<div class="alarm-actions">' +
                        '<button class="btn btn-primary" onclick="editAlarm(\'' + alarm.name + '\')">Edit</button>' +
                        '<button class="btn btn-info btn-sm" onclick="showAlarmJSON(\'' + alarm.name + '\')">📄 JSON</button>' +
                        '<button class="btn btn-danger" onclick="deleteAlarm(\'' + alarm.name + '\')">Delete</button>' +
                    '</div>' +
                '</div>';
            }).join('');
        }
        
        function insertField(fieldName) {
            const textarea = document.getElementById('alarmCondition');
            const cursorPos = textarea.selectionStart;
            const textBefore = textarea.value.substring(0, cursorPos);
            const textAfter = textarea.value.substring(cursorPos);
            
            // Add space before if needed
            const needsSpaceBefore = textBefore.length > 0 && !textBefore.endsWith(' ') && !textBefore.endsWith('(');
            const prefix = needsSpaceBefore ? ' ' : '';
            
            textarea.value = textBefore + prefix + fieldName + textAfter;
            textarea.focus();
            textarea.setSelectionRange(cursorPos + prefix.length + fieldName.length, cursorPos + prefix.length + fieldName.length);
        }
        
        function showCreateModal() {
            currentAlarm = null;
            document.getElementById('alarmName').value = '';
            document.getElementById('alarmName').readOnly = false;
            document.getElementById('alarmDescription').value = '';
            document.getElementById('alarmCondition').value = '';
            document.getElementById('alarmCooldown').value = '1800';
            document.getElementById('alarmEnabled').checked = true;
            
            // Reset delivery methods to console only
            document.getElementById('deliveryConsole').checked = true;
            document.getElementById('deliverySyslog').checked = false;
            document.getElementById('deliveryEventlog').checked = false;
            document.getElementById('deliveryEmail').checked = false;
            document.getElementById('deliverySMS').checked = false;
            
            selectedTags = [];
            renderSelectedTags();
            document.getElementById('tagSearchInput').value = '';
            
            document.getElementById('editModal').classList.add('active');
        }
        
        function editAlarm(name) {
            currentAlarm = alarms.find(a => a.name === name);
            if (!currentAlarm) return;
            
            document.getElementById('alarmName').value = currentAlarm.name;
            document.getElementById('alarmName').readOnly = true;
            document.getElementById('alarmDescription').value = currentAlarm.description || '';
            document.getElementById('alarmCondition').value = currentAlarm.condition;
            
            selectedTags = currentAlarm.tags || [];
            renderSelectedTags();
            document.getElementById('tagSearchInput').value = '';
            
            document.getElementById('alarmCooldown').value = currentAlarm.cooldown || 1800;
            document.getElementById('alarmEnabled').checked = currentAlarm.enabled;
            
            // Load delivery methods from channels
            const channelTypes = (currentAlarm.channels || []).map(ch => ch.type);
            document.getElementById('deliveryConsole').checked = channelTypes.includes('console');
            document.getElementById('deliverySyslog').checked = channelTypes.includes('syslog');
            document.getElementById('deliveryEventlog').checked = channelTypes.includes('eventlog');
            document.getElementById('deliveryEmail').checked = channelTypes.includes('email');
            document.getElementById('deliverySMS').checked = channelTypes.includes('sms');
            
            document.getElementById('editModal').classList.add('active');
        }
        
        function closeModal() {
            document.getElementById('editModal').classList.remove('active');
        }
        
        function closeJSONModal() {
            document.getElementById('jsonModal').classList.remove('active');
        }
        
        function showFullJSON() {
            const config = { alarms: alarms };
            displayJSON(config, 'Full Configuration JSON');
        }
        
        function showAlarmJSON(name) {
            const alarm = alarms.find(a => a.name === name);
            if (!alarm) return;
            displayJSON(alarm, 'Alarm: ' + name);
        }
        
        function displayJSON(data, title) {
            document.getElementById('jsonModalTitle').textContent = title;
            const jsonString = JSON.stringify(data, null, 2);
            document.getElementById('jsonContent').textContent = jsonString;
            document.getElementById('jsonModal').classList.add('active');
        }
        
        async function copyJSON() {
            const jsonText = document.getElementById('jsonContent').textContent;
            try {
                await navigator.clipboard.writeText(jsonText);
                showNotification('JSON copied to clipboard!', 'success');
            } catch (err) {
                // Fallback for older browsers
                const textarea = document.createElement('textarea');
                textarea.value = jsonText;
                textarea.style.position = 'fixed';
                textarea.style.opacity = '0';
                document.body.appendChild(textarea);
                textarea.select();
                try {
                    document.execCommand('copy');
                    showNotification('JSON copied to clipboard!', 'success');
                } catch (e) {
                    showNotification('Failed to copy JSON', 'error');
                }
                document.body.removeChild(textarea);
            }
        }
        
        async function handleSubmit(e) {
            e.preventDefault();
            
            const alarmData = {
                name: document.getElementById('alarmName').value,
                description: document.getElementById('alarmDescription').value,
                condition: document.getElementById('alarmCondition').value,
                tags: selectedTags,
                cooldown: parseInt(document.getElementById('alarmCooldown').value),
                enabled: document.getElementById('alarmEnabled').checked,
                channels: currentAlarm ? currentAlarm.channels : []
            };
            
            const endpoint = currentAlarm ? '/api/alarms/update' : '/api/alarms/create';
            
            try {
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(alarmData)
                });
                
                if (!response.ok) {
                    const error = await response.text();
                    throw new Error(error);
                }
                
                showNotification(currentAlarm ? 'Alarm updated successfully' : 'Alarm created successfully', 'success');
                closeModal();
                await loadAlarms();
                await loadTags();
            } catch (error) {
                showNotification('Error: ' + error.message, 'error');
            }
        }
        
        async function deleteAlarm(name) {
            if (!confirm('Are you sure you want to delete alarm "' + name + '"?')) return;
            
            try {
                const response = await fetch('/api/alarms/delete?name=' + encodeURIComponent(name), {
                    method: 'POST'
                });
                
                if (!response.ok) {
                    throw new Error(await response.text());
                }
                
                showNotification('Alarm deleted successfully', 'success');
                await loadAlarms();
                await loadTags();
            } catch (error) {
                showNotification('Error: ' + error.message, 'error');
            }
        }
        
        async function saveAll() {
            const response = await fetch('/api/config');
            const config = await response.json();
            
            const blob = new Blob([JSON.stringify(config, null, 2)], {type: 'application/json'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'alarms.json';
            a.click();
            
            showNotification('Configuration saved', 'success');
        }
        
        function showNotification(message, type) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = 'notification ' + type + ' show';
            setTimeout(() => {
                notification.classList.remove('show');
</body>
</html>`
